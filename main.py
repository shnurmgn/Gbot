import logging
import asyncio
import io
import os
import time
from functools import wraps
import json
import docx
import google.generativeai as genai
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ChatAction, ParseMode
from PIL import Image
import fitz  # PyMuPDF

# ‚ö°Ô∏è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Upstash Redis
try:
    from upstash_redis.asyncio import Redis
except Exception:
    # fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –Ω–æ —á—Ç–æ–±—ã —Ñ–∞–π–ª –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
    from upstash_redis import Redis  # type: ignore

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
ALLOWED_USER_IDS_STR = os.environ.get('ALLOWED_USER_IDS')
ALLOWED_USER_IDS = [int(user_id.strip()) for user_id in ALLOWED_USER_IDS_STR.split(',')] if ALLOWED_USER_IDS_STR else []

TELEGRAM_MAX_MESSAGE_LENGTH = 4096
DOCUMENT_ANALYSIS_MODELS = ['gemini-1.5-pro', 'gemini-2.5-pro']
IMAGE_GEN_MODELS = ['gemini-2.5-flash-image-preview']
HISTORY_LIMIT = 10
DEFAULT_CHAT_NAME = "default"

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Upstash Redis (async) ---
redis_client = None
try:
    redis_client = Redis.from_url(
        url=os.environ.get('UPSTASH_REDIS_URL'),
        token=os.environ.get('UPSTASH_REDIS_TOKEN')
    )
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis: {e}")
    redis_client = None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Gemini API ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# --- –£—Ç–∏–ª–∏—Ç—ã Redis (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—Ä–∞–ø–ø–µ—Ä—ã) ---
async def r_get(key, default=None):
    try:
        if redis_client:
            val = await redis_client.get(key)
            return val if val is not None else default
    except Exception as e:
        logger.error(f"Redis GET error: {e}")
    return default

async def r_set(key, value, ex=None):
    try:
        if redis_client:
            await redis_client.set(key, value, ex=ex)
    except Exception as e:
        logger.error(f"Redis SET error: {e}")

async def r_sadd(key, value):
    try:
        if redis_client:
            await redis_client.sadd(key, value)
    except Exception as e:
        logger.error(f"Redis SADD error: {e}")

async def r_smembers(key) -> set:
    try:
        if redis_client:
            res = await redis_client.smembers(key)
            return set(res or [])
    except Exception as e:
        logger.error(f"Redis SMEMBERS error: {e}")
    return set()

async def r_delete(key):
    try:
        if redis_client:
            await redis_client.delete(key)
    except Exception as e:
        logger.error(f"Redis DEL error: {e}")

async def r_incrby(key, amount):
    try:
        if redis_client:
            await redis_client.incrby(key, amount)
    except Exception as e:
        logger.error(f"Redis INCRBY error: {e}")

async def r_expire(key, seconds):
    try:
        if redis_client:
            await redis_client.expire(key, seconds)
    except Exception as e:
        logger.error(f"Redis EXPIRE error: {e}")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def restricted(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USER_IDS:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
            if update.message:
                await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            elif update.callback_query:
                await update.callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def update_usage_stats(user_id: int, usage_metadata):
    # usage_metadata —É —Å—Ç—Ä–∏–º–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–µ –ª–æ–º–∞–µ–º—Å—è
    if not redis_client or not hasattr(usage_metadata, 'total_token_count'):
        return
    try:
        total_tokens = usage_metadata.total_token_count
        today = datetime.utcnow().strftime('%Y-%m-%d')
        daily_key = f"usage:{user_id}:daily:{today}"
        await r_incrby(daily_key, total_tokens)
        await r_expire(daily_key, 86400 * 2)
        this_month = datetime.utcnow().strftime('%Y-%m')
        monthly_key = f"usage:{user_id}:monthly:{this_month}"
        await r_incrby(monthly_key, total_tokens)
        await r_expire(monthly_key, 86400 * 32)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")

async def send_long_message(message, text: str):
    if not text or not text.strip():
        return
    # —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–∏—Ç—å—Å—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML
    for i in range(0, len(text), TELEGRAM_MAX_MESSAGE_LENGTH):
        await message.reply_text(text[i:i + TELEGRAM_MAX_MESSAGE_LENGTH], parse_mode=ParseMode.HTML)
        await asyncio.sleep(0.2)

def to_gemini_inline_image(pil_image: Image.Image) -> dict:
    buf = io.BytesIO()
    pil_image.save(buf, format="PNG")
    return {"inline_data": {"mime_type": "image/png", "data": buf.getvalue()}}

def bytes_to_inline_image(data: bytes, mime: str) -> dict:
    return {"inline_data": {"mime_type": mime, "data": data}}

# --- –ò—Å—Ç–æ—Ä–∏—è/–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def get_active_chat_name(user_id: int) -> str:
    return await r_get(f"active_chat:{user_id}", DEFAULT_CHAT_NAME)

async def get_history(user_id: int) -> list:
    active_chat = await get_active_chat_name(user_id)
    try:
        history_data = await r_get(f"history:{user_id}:{active_chat}")
        return json.loads(history_data) if history_data else []
    except Exception:
        return []

async def update_history(user_id: int, user_message_text: str, model_response_text: str):
    active_chat = await get_active_chat_name(user_id)
    history = await get_history(user_id)
    history.append({'role': 'user', 'parts': [{'text': user_message_text}]})
    history.append({'role': 'model', 'parts': [{'text': model_response_text}]})
    if len(history) > HISTORY_LIMIT:
        history = history[-HISTORY_LIMIT:]
    await r_set(f"history:{user_id}:{active_chat}", json.dumps(history), ex=86400 * 7)

async def get_user_model(user_id: int) -> str:
    return await r_get(f"user:{user_id}:model", "gemini-1.5-flash")

async def get_user_persona(user_id: int) -> str | None:
    return await r_get(f"persona:{user_id}")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–¥–º–µ–Ω—é ---
async def get_main_menu_text_and_keyboard(user_id: int):
    model_name = await get_user_model(user_id)
    active_chat = await get_active_chat_name(user_id)
    text = (
        f"ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{model_name}</code>\n"
        f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: <code>{active_chat}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="menu:model"),
            InlineKeyboardButton("üë§ –ü–µ—Ä—Å–æ–Ω–∞", callback_data="menu:persona")
        ],
        [
            InlineKeyboardButton("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", callback_data="menu:open_chats_submenu")
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", callback_data="menu:clear"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:usage")
        ],
        [
            InlineKeyboardButton("‚ùì –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?", callback_data="menu:help")
        ]
    ]
    return text, InlineKeyboardMarkup(keyboard)

async def get_chats_submenu_text_and_keyboard():
    text = "üóÇÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏</b>"
    keyboard = [
        [InlineKeyboardButton("üìñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —á–∞—Ç—ã", callback_data="chats:list")],
        [InlineKeyboardButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", callback_data="chats:save")],
        [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —á–∞—Ç", callback_data="chats:new")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:main")]
    ]
    return text, InlineKeyboardMarkup(keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫ ---
@restricted
async def main_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    menu_text, reply_markup = await get_main_menu_text_and_keyboard(user_id)

    # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç ‚Äî —É–¥–∞–ª–∏–º –µ—ë, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å—Ç–æ–µ –º–µ–Ω—é
    if update.message:
        try:
            await update.message.delete()
        except Exception:
            pass

    target_message = update.callback_query.message if update.callback_query else None

    try:
        if target_message:
            await target_message.edit_text(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            await context.bot.send_message(chat_id=user_id, text=menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        if "Message is not modified" not in str(e):
            await context.bot.send_message(chat_id=user_id, text=menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def clear_history_logic(update: Update):
    user_id = update.effective_user.id
    active_chat = await get_active_chat_name(user_id)
    await r_delete(f"history:{user_id}:{active_chat}")
    return f"–ü–∞–º—è—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (<code>{active_chat}</code>) –æ—á–∏—â–µ–Ω–∞."

@restricted
async def clear_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response_text = await clear_history_logic(update)
    await update.message.reply_text(response_text, parse_mode=ParseMode.HTML)

@restricted
async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False):
    user_id = update.effective_user.id
    if not redis_client:
        target = update.callback_query if from_callback else update.message
        await target.reply_text("–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")  # type: ignore
        return
    today = datetime.utcnow().strftime('%Y-%m-%d')
    this_month = datetime.utcnow().strftime('%Y-%m')
    daily_tokens = await r_get(f"usage:{user_id}:daily:{today}", 0)
    monthly_tokens = await r_get(f"usage:{user_id}:monthly:{this_month}", 0)
    try:
        daily_tokens = int(daily_tokens)
    except Exception:
        daily_tokens = 0
    try:
        monthly_tokens = int(monthly_tokens)
    except Exception:
        monthly_tokens = 0

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:</b>\n\n"
        f"–°–µ–≥–æ–¥–Ω—è ({today}):\n<code>{daily_tokens:,}</code> —Ç–æ–∫–µ–Ω–æ–≤\n\n"
        f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ ({this_month}):\n<code>{monthly_tokens:,}</code> —Ç–æ–∫–µ–Ω–æ–≤"
    )
    if from_callback:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu:main')]]
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@restricted
async def persona_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    persona_text = " ".join(context.args) if context.args else None
    if not redis_client:
        await update.message.reply_text("–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É.")
        return
    if persona_text:
        await r_set(f"persona:{user_id}", persona_text)
        await update.message.reply_text(f"‚úÖ –ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n\n<i>{persona_text}</i>", parse_mode=ParseMode.HTML)
    else:
        await r_delete(f"persona:{user_id}")
        await update.message.reply_text("üóëÔ∏è –ü–µ—Ä—Å–æ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π.")

@restricted
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False):
    help_text = (
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫ Google Gemini.\n\n"
        "üí¨ <b>–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π</b>\n"
        "–ü–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É, —è –ø–æ–º–æ–≥–∞—é –∏ –ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n"
        "ü§ñ <b>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</b> —á–µ—Ä–µ–∑ –º–µ–Ω—é: <code>Pro</code> ‚Äî —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, <code>Flash</code> ‚Äî –±—ã—Å—Ç—Ä–æ, "
        "<code>Image Preview</code> ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è/–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞</b> (/persona): –∑–∞–¥–∞–π—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞.\n\n"
        "üóÇÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏</b>:\n"
        "‚Ä¢ /new_chat ‚Äî –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        "‚Ä¢ /save_chat &lt;–∏–º—è&gt; ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π\n"
        "‚Ä¢ /load_chat &lt;–∏–º—è&gt; ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π\n"
        "‚Ä¢ /chats ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
        "‚Ä¢ /delete_chat &lt;–∏–º—è&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å —á–∞—Ç\n"
        "‚Ä¢ /clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞\n\n"
        "üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏).\n\n"
        "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã</b>: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF/DOCX/TXT —Å –ø–æ–¥–ø–∏—Å—å—é-–∑–∞–¥–∞–Ω–∏–µ–º.\n\n"
        "üìà <b>–†–∞—Å—Ö–æ–¥—ã</b> (/usage): —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –º–µ—Å—è—Ü.\n"
    )
    if from_callback:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu:main')]]
        await update.callback_query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

@restricted
async def model_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Gemini 2.5 Pro", callback_data='select_model:gemini-2.5-pro')],
        [InlineKeyboardButton("Gemini 1.5 Pro", callback_data='select_model:gemini-1.5-pro')],
        [InlineKeyboardButton("Gemini 2.5 Flash", callback_data='select_model:gemini-2.5-flash')],
        [InlineKeyboardButton("Gemini 1.5 Flash", callback_data='select_model:gemini-1.5-flash')],
        [InlineKeyboardButton("Image Preview", callback_data='select_model:gemini-2.5-flash-image-preview')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu:main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', reply_markup=reply_markup)

@restricted
async def new_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False):
    user_id = update.effective_user.id
    if not redis_client:
        return
    await r_set(f"active_chat:{user_id}", DEFAULT_CHAT_NAME)
    await r_delete(f"history:{user_id}:{DEFAULT_CHAT_NAME}")
    response_text = f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (<code>{DEFAULT_CHAT_NAME}</code>)."
    target_message = update.callback_query.message if from_callback else update.message
    await target_message.reply_text(response_text, parse_mode=ParseMode.HTML)

@restricted
async def save_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client:
        return
    chat_name = "_".join(context.args).strip().replace(" ", "_")
    if not chat_name or chat_name == DEFAULT_CHAT_NAME:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/save_chat –º–æ–π_–ø—Ä–æ–µ–∫—Ç</code>.", parse_mode=ParseMode.HTML)
        return
    active_chat = await get_active_chat_name(user_id)
    current_history_json = await r_get(f"history:{user_id}:{active_chat}")
    if not current_history_json:
        await update.message.reply_text("–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
        return
    await r_set(f"history:{user_id}:{chat_name}", current_history_json, ex=86400 * 7)
    await r_sadd(f"chats:{user_id}", chat_name)
    await r_set(f"active_chat:{user_id}", chat_name)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ <code>{chat_name}</code> –∏ —Å–¥–µ–ª–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º.", parse_mode=ParseMode.HTML)

@restricted
async def load_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client:
        return
    chat_name = "_".join(context.args).strip().replace(" ", "_")
    if not chat_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —á–∞—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/load_chat –º–æ–π_–ø—Ä–æ–µ–∫—Ç</code>.", parse_mode=ParseMode.HTML)
        return
    all_chats = await r_smembers(f"chats:{user_id}")
    if chat_name != DEFAULT_CHAT_NAME and chat_name not in all_chats:
        await update.message.reply_text(f"–ß–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º <code>{chat_name}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.HTML)
        return
    await r_set(f"active_chat:{user_id}", chat_name)
    await update.message.reply_text(f"–ß–∞—Ç <code>{chat_name}</code> –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–¥–µ–ª–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º.", parse_mode=ParseMode.HTML)

@restricted
async def list_chats_command(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False):
    user_id = update.effective_user.id
    if not redis_client:
        return
    active_chat = await get_active_chat_name(user_id)
    all_chats = await r_smembers(f"chats:{user_id}")
    message = f"<b>–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏:</b>\n\n"
    if active_chat == DEFAULT_CHAT_NAME:
        message += f"‚û°Ô∏è <code>{DEFAULT_CHAT_NAME}</code> (–∞–∫—Ç–∏–≤–Ω—ã–π)\n"
    else:
        message += f"‚ñ´Ô∏è <code>{DEFAULT_CHAT_NAME}</code> (<code>/new_chat</code>)\n"
    for chat in sorted(list(all_chats)):
        if chat == active_chat:
            message += f"‚û°Ô∏è <code>{chat}</code> (–∞–∫—Ç–∏–≤–Ω—ã–π)\n"
        else:
            message += f"‚ñ´Ô∏è <code>{chat}</code> (<code>/load_chat {chat}</code>)\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu:main')]]
    if from_callback:
        await update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)

@restricted
async def delete_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client:
        return
    chat_name = "_".join(context.args).strip().replace(" ", "_")
    if not chat_name or chat_name == DEFAULT_CHAT_NAME:
        await update.message.reply_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/delete_chat –º–æ–π_–ø—Ä–æ–µ–∫—Ç</code>.", parse_mode=ParseMode.HTML)
        return
    all_chats = await r_smembers(f"chats:{user_id}")
    if chat_name not in all_chats:
        await update.message.reply_text(f"–ß–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º <code>{chat_name}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.HTML)
        return
    await r_delete(f"history:{user_id}:{chat_name}")
    try:
        # –≤ upstash_redis.asyncio –Ω–µ—Ç srem —É–¥–æ–±–Ω–æ–≥–æ? –µ—Å—Ç—å, –Ω–æ —á–µ—Ä–µ–∑ eval –ø—Ä–æ—â–µ –æ–±–æ–π—Ç–∏
        await redis_client.srem(f"chats:{user_id}", chat_name)  # type: ignore
    except Exception:
        pass
    active_chat = await get_active_chat_name(user_id)
    if active_chat == chat_name:
        await r_set(f"active_chat:{user_id}", DEFAULT_CHAT_NAME)
        await update.message.reply_text(f"–ß–∞—Ç <code>{chat_name}</code> —É–¥–∞–ª–µ–Ω. –í—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(f"–ß–∞—Ç <code>{chat_name}</code> —É–¥–∞–ª–µ–Ω.", parse_mode=ParseMode.HTML)

@restricted
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    command, *payload = query.data.split(':', 1)
    payload = payload[0] if payload else None

    if command == "menu":
        if payload == "model":
            await model_selection_menu(update, context)
        elif payload == "persona":
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/persona &lt;—Ç–µ–∫—Å—Ç&gt;</code> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏,\n<code>/persona</code> –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞.", parse_mode=ParseMode.HTML)
        elif payload == "open_chats_submenu":
            submenu_text, reply_markup = await get_chats_submenu_text_and_keyboard()
            await query.edit_message_text(submenu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        elif payload == "clear":
            response_text = await clear_history_logic(update)
            await query.message.reply_text(response_text, parse_mode=ParseMode.HTML)
            await main_menu_command(update, context)  # ‚úÖ —Ñ–∏–∫—Å: —Ä–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π menu_command
        elif payload == "usage":
            await usage_command(update, context, from_callback=True)
        elif payload == "help":
            await help_command(update, context, from_callback=True)
        elif payload == "main":
            await main_menu_command(update, context)

    elif command == "chats":
        if payload == "list":
            await list_chats_command(update, context, from_callback=True)
        elif payload == "save":
            await query.message.reply_text("–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/save_chat &lt;–∏–º—è_—á–∞—Ç–∞&gt;</code>\n–ü—Ä–æ–±–µ–ª—ã –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.", parse_mode=ParseMode.HTML)
        elif payload == "new":
            await new_chat_command(update, context, from_callback=True)
            await main_menu_command(update, context)

    elif command == "select_model":
        user_id = query.from_user.id
        if redis_client:
            await r_set(f"user:{user_id}:model", payload)
        menu_text, reply_markup = await get_main_menu_text_and_keyboard(user_id)
        try:
            await query.edit_message_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <code>{payload}</code>.\n\n" + menu_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception:
            pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Gemini ---
async def handle_gemini_response(update: Update, response):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ù–ï-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)."""
    try:
        if hasattr(response, 'usage_metadata'):
            await update_usage_stats(update.effective_user.id, response.usage_metadata)

        if not getattr(response, "candidates", None):
            reason = getattr(getattr(response, "prompt_feedback", None), 'block_reason_message', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.')
            await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return

        candidate = response.candidates[0]
        finish = getattr(candidate, "finish_reason", None)
        if finish and getattr(finish, "name", "STOP") != "STOP":
            await update.message.reply_text(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: <code>{finish.name}</code>", parse_mode=ParseMode.HTML)
            return

        parts = getattr(candidate, "content", None).parts if getattr(candidate, "content", None) else []
        full_text = ""
        image_sent = False
        for part in parts:
            # —Ç–µ–∫—Å—Ç
            if hasattr(part, 'text') and part.text:
                full_text += part.text
            # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ inline_data
            elif hasattr(part, 'inline_data') and part.inline_data and getattr(part.inline_data, "mime_type", "").startswith('image/'):
                try:
                    data = part.inline_data.data if hasattr(part.inline_data, "data") else None
                    if data:
                        await update.message.reply_photo(photo=io.BytesIO(data))
                        image_sent = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        if full_text.strip() and not image_sent:
            await send_long_message(update.message, full_text)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

async def handle_gemini_response_stream(update: Update, response_stream, user_message_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –æ–±–Ω–æ–≤–ª—è—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–∏–Ω–∞–ª."""
    placeholder_message = None
    full_response_text = ""
    last_update_time = 0
    update_interval = 0.8
    try:
        placeholder_message = await update.message.reply_text("...")
        last_update_time = time.time()

        async for chunk in response_stream:
            if hasattr(chunk, 'text') and chunk.text:
                full_response_text += chunk.text
                current_time = time.time()
                if current_time - last_update_time > update_interval:
                    try:
                        # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –±–µ–∑ parse_mode ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        if len(full_response_text) < TELEGRAM_MAX_MESSAGE_LENGTH - 10:
                            await placeholder_message.edit_text(full_response_text + " ‚úçÔ∏è")
                            last_update_time = current_time
                    except Exception:
                        pass

        if placeholder_message:
            try:
                await placeholder_message.delete()
            except Exception:
                pass

        if not full_response_text.strip():
            await update.message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
            return

        await send_long_message(update.message, full_response_text)
        await update_history(update.effective_user.id, user_message_text, full_response_text)

        # response_stream —á–∞—Å—Ç–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç usage_metadata ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∏–º–∏–Ω–≥-–æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}")
        if placeholder_message:
            try:
                await placeholder_message.delete()
            except Exception:
                pass
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

# --- –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---
@restricted
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    model_name = await get_user_model(user_id)
    persona = await get_user_persona(user_id)

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    try:
        model = genai.GenerativeModel(model_name, system_instruction=persona)
        if model_name in IMAGE_GEN_MODELS:
            image_prompt = f"Generate a high-quality, photorealistic image of: {user_message}"
            response = await model.generate_content_async(image_prompt)
            await handle_gemini_response(update, response)
            await update_history(user_id, user_message, "[–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]")
        else:
            history = await get_history(user_id)
            chat = model.start_chat(history=history)
            response_stream = await chat.send_message_async(user_message, stream=True)
            await handle_gemini_response_stream(update, response_stream, user_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

@restricted
async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    model_name = await get_user_model(user_id)
    persona = await get_user_persona(user_id)
    if model_name not in IMAGE_GEN_MODELS:
        await update.message.reply_text("–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å \"Image Preview\" —á–µ—Ä–µ–∑ /menu.")
        return

    photo_file = await update.message.photo[-1].get_file()
    caption = update.message.caption or "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)

    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã –±–µ–∑ PIL, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ inline_data
        photo_bytes = io.BytesIO()
        await photo_file.download_to_memory(photo_bytes)
        photo_bytes.seek(0)
        inline_img = bytes_to_inline_image(photo_bytes.getvalue(), "image/jpeg")

        model_gemini = genai.GenerativeModel(model_name, system_instruction=persona)
        response = await model_gemini.generate_content_async([caption, inline_img])
        await handle_gemini_response(update, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}')

@restricted
async def handle_document_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    model_name = await get_user_model(user_id)
    persona = await get_user_persona(user_id)
    if model_name not in DOCUMENT_ANALYSIS_MODELS:
        await update.message.reply_text(f"–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Pro.")
        return

    doc = update.message.document
    caption = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É."
    await update.message.reply_text(f"–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª: {doc.file_name}.\n–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    try:
        doc_file = await doc.get_file()
        file_bytes_io = io.BytesIO()
        await doc_file.download_to_memory(file_bytes_io)
        file_bytes_io.seek(0)

        content_parts = [caption]

        if doc.mime_type == 'application/pdf':
            pdf_document = fitz.open(stream=file_bytes_io.read(), filetype="pdf")
            page_limit = 25
            num_pages = min(len(pdf_document), page_limit)
            for page_num in range(num_pages):
                page = pdf_document.load_page(page_num)
                pix = page.get_pixmap()
                img_bytes = pix.tobytes("png")
                # –±–µ–∑ PIL: —Å—Ä–∞–∑—É inline image
                content_parts.append(bytes_to_inline_image(img_bytes, "image/png"))
            pdf_document.close()
            await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—ã–µ {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü PDF –≤ Gemini –Ω–∞ –∞–Ω–∞–ª–∏–∑...")

        elif doc.mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            document = docx.Document(file_bytes_io)
            file_text_content = "\n".join([para.text for para in document.paragraphs])
            content_parts.append(file_text_content)

        elif doc.mime_type == 'text/plain':
            file_text_content = file_bytes_io.read().decode('utf-8', errors='ignore')
            content_parts.append(file_text_content)

        else:
            await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ {doc.mime_type}.")
            return

        model = genai.GenerativeModel(model_name, system_instruction=persona)
        response = await model.generate_content_async(content_parts)
        await handle_gemini_response(update, response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}')

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main() -> None:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", main_menu_command))
    application.add_handler(CommandHandler("menu", main_menu_command))
    application.add_handler(CommandHandler("clear", clear_history_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("persona", persona_command))
    application.add_handler(CommandHandler("new_chat", new_chat_command))
    application.add_handler(CommandHandler("save_chat", save_chat_command))
    application.add_handler(CommandHandler("load_chat", load_chat_command))
    application.add_handler(CommandHandler("chats", list_chats_command))
    application.add_handler(CommandHandler("delete_chat", delete_chat_command))
    application.add_handler(CommandHandler("help", help_command))

    # –∫–æ–ª–±—ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))

    # —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
    supported_files_filter = filters.Document.PDF | filters.Document.DOCX | filters.Document.TXT
    application.add_handler(MessageHandler(supported_files_filter, handle_document_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...")
    application.run_polling()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (–ø–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –∏ –∫–ª–∏–µ–Ω—Ç)
    ready = True
    missing = []
    if not TELEGRAM_BOT_TOKEN: missing.append("TELEGRAM_BOT_TOKEN")
    if not GEMINI_API_KEY: missing.append("GEMINI_API_KEY")
    if not ALLOWED_USER_IDS_STR: missing.append("ALLOWED_USER_IDS")
    if not redis_client: missing.append("UPSTASH_REDIS_URL/UPSTASH_REDIS_TOKEN")

    if missing:
        logger.critical(f"–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
        ready = False

    # –ü–∏–Ω–≥—É–µ–º Redis –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    async def _ping():
        try:
            if hasattr(redis_client, "ping"):
                await redis_client.ping()  # type: ignore
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Upstash Redis.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")

    if ready:
        try:
            asyncio.run(_ping())
        except Exception:
            pass
        main()
