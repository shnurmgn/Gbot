import logging
import asyncio
import io
import os
import time
from functools import wraps
import json
import docx
import google.generativeai as genai
from datetime import datetime
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from PIL import Image
import fitz
from upstash_redis import Redis

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
ALLOWED_USER_IDS_STR = os.environ.get('ALLOWED_USER_IDS')
ALLOWED_USER_IDS = [int(user_id.strip()) for user_id in ALLOWED_USER_IDS_STR.split(',')] if ALLOWED_USER_IDS_STR else []

TELEGRAM_MAX_MESSAGE_LENGTH = 4096
DOCUMENT_ANALYSIS_MODELS = ['gemini-1.5-pro', 'gemini-2.5-pro']
IMAGE_GEN_MODELS = ['gemini-2.5-flash-image-preview']
HISTORY_LIMIT = 10 
DEFAULT_CHAT_NAME = "default"

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Upstash Redis ---
redis_client = None
try:
    redis_client = Redis(
        url=os.environ.get('UPSTASH_REDIS_URL'),
        token=os.environ.get('UPSTASH_REDIS_TOKEN'),
        decode_responses=True
    )
    redis_client.ping()
    logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Upstash Redis.")
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Gemini API ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def restricted(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USER_IDS:
            if update.message: await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def update_usage_stats(user_id: int, usage_metadata):
    if not redis_client or not hasattr(usage_metadata, 'total_token_count'): return
    try:
        total_tokens = usage_metadata.total_token_count
        today = datetime.utcnow().strftime('%Y-%m-%d')
        daily_key = f"usage:{user_id}:daily:{today}"
        redis_client.incrby(daily_key, total_tokens)
        redis_client.expire(daily_key, 86400 * 2)
        this_month = datetime.utcnow().strftime('%Y-%m')
        monthly_key = f"usage:{user_id}:monthly:{this_month}"
        redis_client.incrby(monthly_key, total_tokens)
        redis_client.expire(monthly_key, 86400 * 32)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")

async def send_long_message(update: Update, text: str):
    if not text.strip(): return
    if len(text) <= TELEGRAM_MAX_MESSAGE_LENGTH:
        await update.message.reply_text(text)
    else:
        for i in range(0, len(text), TELEGRAM_MAX_MESSAGE_LENGTH):
            await update.message.reply_text(text[i:i + TELEGRAM_MAX_MESSAGE_LENGTH])
            await asyncio.sleep(0.5)

async def handle_gemini_response(update: Update, response):
    if hasattr(response, 'usage_metadata'):
        update_usage_stats(update.effective_user.id, response.usage_metadata)
    try:
        if not response.candidates:
            await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {getattr(response.prompt_feedback, 'block_reason_message', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.')}")
            return
        candidate = response.candidates[0]
        if candidate.finish_reason.name != "STOP":
            await update.message.reply_text(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: `{candidate.finish_reason.name}`", parse_mode='Markdown')
            return
        if not candidate.content.parts:
            await update.message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
            return
        full_text = ""
        image_sent = False
        for part in candidate.content.parts:
            if hasattr(part, 'text') and part.text:
                full_text += part.text
            elif hasattr(part, 'inline_data') and part.inline_data.mime_type.startswith('image/'):
                await update.message.reply_photo(photo=io.BytesIO(part.inline_data.data))
                image_sent = True
        if full_text and not image_sent:
            await send_long_message(update, full_text)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

async def handle_gemini_response_stream(update: Update, response_stream, user_message_text: str):
    placeholder_message = None
    full_response_text = ""
    last_update_time = 0
    update_interval = 0.8
    try:
        placeholder_message = await update.message.reply_text("...")
        last_update_time = time.time()
        async for chunk in response_stream:
            if hasattr(chunk, 'text') and chunk.text:
                full_response_text += chunk.text
                current_time = time.time()
                if current_time - last_update_time > update_interval:
                    try:
                        if len(full_response_text) < TELEGRAM_MAX_MESSAGE_LENGTH - 10:
                            await placeholder_message.edit_text(full_response_text + " ‚úçÔ∏è")
                            last_update_time = current_time
                    except telegram.error.BadRequest:
                        pass
        if placeholder_message:
            await placeholder_message.delete()
        if not full_response_text.strip():
             await update.message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
             return
        await send_long_message(update, full_response_text)
        update_history(update.effective_user.id, user_message_text, full_response_text)
        if hasattr(response_stream, 'usage_metadata') and response_stream.usage_metadata:
            update_usage_stats(update.effective_user.id, response_stream.usage_metadata)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∏–º–∏–Ω–≥-–æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}")
        if placeholder_message: await placeholder_message.delete()
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

def get_active_chat_name(user_id: int) -> str:
    if not redis_client: return DEFAULT_CHAT_NAME
    return redis_client.get(f"active_chat:{user_id}") or DEFAULT_CHAT_NAME

def get_history(user_id: int) -> list:
    if not redis_client: return []
    active_chat = get_active_chat_name(user_id)
    try:
        history_data = redis_client.get(f"history:{user_id}:{active_chat}")
        return json.loads(history_data) if history_data else []
    except Exception: return []

def update_history(user_id: int, user_message_text: str, model_response_text: str):
    if not redis_client: return
    active_chat = get_active_chat_name(user_id)
    history = get_history(user_id)
    history.append({'role': 'user', 'parts': [{'text': user_message_text}]})
    history.append({'role': 'model', 'parts': [{'text': model_response_text}]})
    if len(history) > HISTORY_LIMIT:
        history = history[-HISTORY_LIMIT:]
    redis_client.set(f"history:{user_id}:{active_chat}", json.dumps(history), ex=86400 * 7)

def get_user_model(user_id: int) -> str:
    default_model = 'gemini-1.5-flash'
    if not redis_client: return default_model
    try:
        stored_model = redis_client.get(f"user:{user_id}:model")
        return stored_model if stored_model else default_model
    except Exception: return default_model

def get_user_persona(user_id: int) -> str:
    if not redis_client: return None
    return redis_client.get(f"persona:{user_id}")

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    model_name = get_user_model(user.id)
    active_chat = get_active_chat_name(user.id)
    await update.message.reply_html(rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!")
    await update.message.reply_text(
        f"–Ø –±–æ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫ Gemini.\n"
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: `{model_name}`\n"
        f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: `{active_chat}`",
        parse_mode='Markdown'
    )
    await menu_command(update, context)

@restricted
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["/model", "/persona"],
        ["/chats", "/new_chat", "/clear"],
        ["/usage", "/hide_menu"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

@restricted
async def hide_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ.", reply_markup=ReplyKeyboardRemove())

@restricted
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active_chat = get_active_chat_name(user_id)
    if redis_client: redis_client.delete(f"history:{user_id}:{active_chat}")
    await update.message.reply_text(f"–ü–∞–º—è—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (`{active_chat}`) –æ—á–∏—â–µ–Ω–∞.")
    
@restricted
async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client:
        await update.message.reply_text("–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    today = datetime.utcnow().strftime('%Y-%m-%d')
    this_month = datetime.utcnow().strftime('%Y-%m')
    daily_tokens = redis_client.get(f"usage:{user_id}:daily:{today}") or 0
    monthly_tokens = redis_client.get(f"usage:{user_id}:monthly:{this_month}") or 0
    await update.message.reply_text(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:**\n\n"
        f"–°–µ–≥–æ–¥–Ω—è ({today}):\n`{int(daily_tokens):,}` —Ç–æ–∫–µ–Ω–æ–≤\n\n"
        f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ ({this_month}):\n`{int(monthly_tokens):,}` —Ç–æ–∫–µ–Ω–æ–≤",
        parse_mode='Markdown'
    )

@restricted
async def persona_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    persona_text = " ".join(context.args) if context.args else None
    if not redis_client:
        await update.message.reply_text("–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É.")
        return
    if persona_text:
        redis_client.set(f"persona:{user_id}", persona_text)
        await update.message.reply_text(f"‚úÖ –ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n\n_{persona_text}_", parse_mode='Markdown')
    else:
        redis_client.delete(f"persona:{user_id}")
        await update.message.reply_text("üóëÔ∏è –ü–µ—Ä—Å–æ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π.")

@restricted
async def model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Gemini 2.5 Pro", callback_data='gemini-2.5-pro')],
        [InlineKeyboardButton("Gemini 1.5 Pro", callback_data='gemini-1.5-pro')],
        [InlineKeyboardButton("Gemini 2.5 Flash", callback_data='gemini-2.5-flash')],
        [InlineKeyboardButton("Gemini 1.5 Flash", callback_data='gemini-1.5-flash')],
        [InlineKeyboardButton("Nano Banana (Image)", callback_data='gemini-2.5-flash-image-preview')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', reply_markup=reply_markup)

@restricted
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    selected_model = query.data
    if redis_client: redis_client.set(f"user:{user_id}:model", selected_model)
    await query.edit_message_text(text=f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model}. –Ø –∑–∞–ø–æ–º–Ω—é –≤–∞—à –≤—ã–±–æ—Ä.")

@restricted
async def new_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client: return
    redis_client.set(f"active_chat:{user_id}", DEFAULT_CHAT_NAME)
    redis_client.delete(f"history:{user_id}:{DEFAULT_CHAT_NAME}")
    await update.message.reply_text(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (`{DEFAULT_CHAT_NAME}`).")

@restricted
async def save_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client: return
    chat_name = " ".join(context.args).strip().replace(" ", "_")
    if not chat_name or chat_name == DEFAULT_CHAT_NAME:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: `/save_chat –º–æ–π_–ø—Ä–æ–µ–∫—Ç`.")
        return
    active_chat = get_active_chat_name(user_id)
    current_history_json = redis_client.get(f"history:{user_id}:{active_chat}")
    if not current_history_json:
        await update.message.reply_text("–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
        return
    redis_client.set(f"history:{user_id}:{chat_name}", current_history_json, ex=86400 * 7)
    redis_client.sadd(f"chats:{user_id}", chat_name)
    redis_client.set(f"active_chat:{user_id}", chat_name)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ `{chat_name}` –∏ —Å–¥–µ–ª–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º.")

@restricted
async def load_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client: return
    chat_name = " ".join(context.args).strip()
    if not chat_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —á–∞—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/load_chat –º–æ–π_–ø—Ä–æ–µ–∫—Ç`.")
        return
    if not redis_client.sismember(f"chats:{user_id}", chat_name) and chat_name != DEFAULT_CHAT_NAME:
        await update.message.reply_text(f"–ß–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º `{chat_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    redis_client.set(f"active_chat:{user_id}", chat_name)
    await update.message.reply_text(f"–ß–∞—Ç `{chat_name}` –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–¥–µ–ª–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º.")

@restricted
async def list_chats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client: return
    active_chat = get_active_chat_name(user_id)
    all_chats = redis_client.smembers(f"chats:{user_id}")
    message = f"**–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏:**\n\n"
    if active_chat == DEFAULT_CHAT_NAME:
        message += f"‚û°Ô∏è `{DEFAULT_CHAT_NAME}` (–∞–∫—Ç–∏–≤–Ω—ã–π)\n"
    else:
        message += f"‚ñ´Ô∏è `{DEFAULT_CHAT_NAME}`\n"
    for chat in sorted(list(all_chats)):
        if chat == active_chat:
            message += f"‚û°Ô∏è `{chat}` (–∞–∫—Ç–∏–≤–Ω—ã–π)\n"
        else:
            message += f"‚ñ´Ô∏è `{chat}`\n"
    await update.message.reply_text(message, parse_mode='Markdown')

@restricted
async def delete_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not redis_client: return
    chat_name = " ".join(context.args).strip()
    if not chat_name or chat_name == DEFAULT_CHAT_NAME:
        await update.message.reply_text(f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/delete_chat –º–æ–π_–ø—Ä–æ–µ–∫—Ç`.")
        return
    if not redis_client.sismember(f"chats:{user_id}", chat_name):
        await update.message.reply_text(f"–ß–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º `{chat_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    redis_client.delete(f"history:{user_id}:{chat_name}")
    redis_client.srem(f"chats:{user_id}", chat_name)
    active_chat = get_active_chat_name(user_id)
    if active_chat == chat_name:
        redis_client.set(f"active_chat:{user_id}", DEFAULT_CHAT_NAME)
        await update.message.reply_text(f"–ß–∞—Ç `{chat_name}` —É–¥–∞–ª–µ–Ω. –í—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    else:
        await update.message.reply_text(f"–ß–∞—Ç `{chat_name}` —É–¥–∞–ª–µ–Ω.")

@restricted
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    model_name = get_user_model(user_id)
    persona = get_user_persona(user_id)
    await update.message.reply_chat_action(telegram.constants.ChatAction.TYPING)
    try:
        model = genai.GenerativeModel(model_name, system_instruction=persona)
        if model_name in IMAGE_GEN_MODELS:
            image_prompt = f"Generate a high-quality, photorealistic image of: {user_message}"
            response = await model.generate_content_async(image_prompt)
            await handle_gemini_response(update, response)
            update_history(user_id, user_message, "[–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]")
        else:
            history = get_history(user_id)
            chat = model.start_chat(history=history)
            response_stream = await chat.send_message_async(user_message, stream=True)
            await handle_gemini_response_stream(update, response_stream, user_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

@restricted
async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    model_name = get_user_model(user_id)
    persona = get_user_persona(user_id)
    if model_name not in IMAGE_GEN_MODELS:
        await update.message.reply_text("–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å 'Nano Banana' —á–µ—Ä–µ–∑ /model.")
        return
    photo_file = await update.message.photo[-1].get_file()
    caption = update.message.caption or "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    await update.message.reply_chat_action(telegram.constants.ChatAction.UPLOAD_PHOTO)
    try:
        photo_bytes = io.BytesIO()
        await photo_file.download_to_memory(photo_bytes)
        photo_bytes.seek(0)
        img = Image.open(photo_bytes)
        model_gemini = genai.GenerativeModel(model_name, system_instruction=persona)
        response = await model_gemini.generate_content_async([caption, img])
        await handle_gemini_response(update, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}')

@restricted
async def handle_document_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    model_name = get_user_model(user_id)
    persona = get_user_persona(user_id)
    if model_name not in DOCUMENT_ANALYSIS_MODELS:
        await update.message.reply_text(f"–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Pro.")
        return
    doc = update.message.document
    caption = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É."
    await update.message.reply_text(f"–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª: {doc.file_name}.\n–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    try:
        doc_file = await doc.get_file()
        file_bytes_io = io.BytesIO()
        await doc_file.download_to_memory(file_bytes_io)
        file_bytes_io.seek(0)
        content_parts = [caption]
        if doc.mime_type == 'application/pdf':
            pdf_document = fitz.open(stream=file_bytes_io.read(), filetype="pdf")
            page_limit = 25 
            num_pages = min(len(pdf_document), page_limit)
            for page_num in range(num_pages):
                page = pdf_document.load_page(page_num)
                pix = page.get_pixmap()
                img_bytes = pix.tobytes("png")
                img = Image.open(io.BytesIO(img_bytes))
                content_parts.append(img)
            pdf_document.close()
            await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—ã–µ {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü PDF –≤ Gemini –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
        elif doc.mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            document = docx.Document(file_bytes_io)
            file_text_content = "\n".join([para.text for para in document.paragraphs])
            content_parts.append(file_text_content)
        elif doc.mime_type == 'text/plain':
            file_text_content = file_bytes_io.read().decode('utf-8')
            content_parts.append(file_text_content)
        else:
            await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ {doc.mime_type}.")
            return
        model = genai.GenerativeModel(model_name, system_instruction=persona)
        response = await model.generate_content_async(content_parts)
        await handle_gemini_response(update, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}')

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ---
def main() -> None:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("model", model_selection))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("persona", persona_command))
    application.add_handler(CommandHandler("new_chat", new_chat_command))
    application.add_handler(CommandHandler("save_chat", save_chat_command))
    application.add_handler(CommandHandler("load_chat", load_chat_command))
    application.add_handler(CommandHandler("chats", list_chats_command))
    application.add_handler(CommandHandler("delete_chat", delete_chat_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
    supported_files_filter = filters.Document.PDF | filters.Document.DOCX | filters.Document.TXT
    application.add_handler(MessageHandler(supported_files_filter, handle_document_message))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("hide_menu", hide_menu_command))

    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...")
    application.run_polling()

if __name__ == "__main__":
    if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, ALLOWED_USER_IDS_STR, redis_client]):
        logger.critical("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    else:
        main()
